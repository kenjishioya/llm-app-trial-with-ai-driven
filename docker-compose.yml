version: '3.8'

services:
  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: qrai_backend
    ports:
      - "8000:8000"
    env_file:
      - .env.development
    environment:
      # Docker/コンテナ専用設定（Docker Composeでのみ必要な設定）
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1

    volumes:
      - ./backend:/app
      - backend_cache:/root/.cache
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - qrai-network

  # Next.js Frontend (temporarily disabled for backend testing)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #     target: development
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NODE_ENV=development
  #     - NEXT_PUBLIC_API_URL=http://localhost:8000
  #     - NEXT_PUBLIC_GRAPHQL_URL=http://localhost:8000/graphql
  #     - NEXT_PUBLIC_GRAPHQL_WS_URL=ws://localhost:8000/graphql
  #   volumes:
  #     - ./frontend:/app
  #     - frontend_node_modules:/app/node_modules
  #     - frontend_next:/app/.next
  #   command: npm run dev
  #   depends_on:
  #     - backend
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3000"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - qrai-network

  # PostgreSQL (本番環境のCosmos DB代替)
  postgres:
    image: postgres:15-alpine
    container_name: qrai_postgres
    env_file:
      - .env.development  # PostgreSQL設定も.envから読み込み
    environment:
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=ja_JP.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_postgres.sql:/docker-entrypoint-initdb.d/01_init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qrai_user -d qrai_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - qrai-network

  # Redis (セッション管理・キャッシュ用)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - qrai-network

volumes:
  backend_cache:
  # frontend_node_modules:
  # frontend_next:
  postgres_data:
  redis_data:

networks:
  qrai-network:
    driver: bridge
