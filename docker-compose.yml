version: '3.8'

services:
  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    ports:
      - "8000:8000"
    environment:
      - ENV=development
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1

      # Database (開発用はSQLite)
      - DATABASE_URL=sqlite:///./test.db

      # LLM Provider設定（環境変数から取得）
      - LLM_PRIMARY_PROVIDER=${LLM_PRIMARY_PROVIDER:-openrouter}
      - LLM_FALLBACK_PROVIDERS=${LLM_FALLBACK_PROVIDERS:-google_ai,azure_openai}

      # Key Vault（開発環境では直接環境変数）
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY:-}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY:-}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT:-}

      # Azure Search（開発環境では無効化可能）
      - AZURE_SEARCH_ENDPOINT=${AZURE_SEARCH_ENDPOINT:-}
      - AZURE_SEARCH_API_KEY=${AZURE_SEARCH_API_KEY:-}

    volumes:
      - ./backend:/app
      - backend_cache:/root/.cache
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - qrai-network

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_GRAPHQL_URL=http://localhost:8000/graphql
      - NEXT_PUBLIC_GRAPHQL_WS_URL=ws://localhost:8000/graphql
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_next:/app/.next
    command: npm run dev
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - qrai-network

  # PostgreSQL (本番環境のCosmos DB代替)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=qrai_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - qrai-network

  # Redis (セッション管理・キャッシュ用)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - qrai-network

volumes:
  backend_cache:
  frontend_node_modules:
  frontend_next:
  postgres_data:
  redis_data:

networks:
  qrai-network:
    driver: bridge
