#!/bin/bash
# PostgreSQL „Éá„Éº„Çø„Éô„Éº„Çπ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Çπ„ÇØ„É™„Éó„Éà
# QRAI „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁî®

set -e  # „Ç®„É©„ÉºÊôÇÂç≥Â∫ß„Å´ÁµÇ‰∫Ü

# Ë®≠ÂÆö
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
BACKUP_DIR="${PROJECT_ROOT}/backups"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# Áí∞Â¢ÉÂ§âÊï∞Ë™≠„ÅøËæº„Åø
if [ -f "$PROJECT_ROOT/.env" ]; then
    source "$PROJECT_ROOT/.env"
fi

# „Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö
DB_HOST="${DB_HOST:-localhost}"
DB_PORT="${DB_PORT:-5432}"
DB_NAME="${DB_NAME:-qrai_dev}"
DB_USER="${DB_USER:-qrai_user}"
BACKUP_RETENTION_DAYS="${BACKUP_RETENTION_DAYS:-7}"

# „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
mkdir -p "$BACKUP_DIR"

echo "üóÉÔ∏è  Starting PostgreSQL backup..."
echo "Database: $DB_NAME@$DB_HOST:$DB_PORT"
echo "Timestamp: $TIMESTAMP"

# „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Éï„Ç°„Ç§„É´Âêç
BACKUP_FILE="$BACKUP_DIR/qrai_backup_${TIMESTAMP}.sql"
BACKUP_COMPRESSED="$BACKUP_FILE.gz"

# PostgreSQL „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÂÆüË°å
echo "üì¶ Creating database dump..."
if command -v docker &> /dev/null && docker ps | grep -q "qrai_postgres"; then
    # DockerÁí∞Â¢É„ÅÆÂ†¥Âêà
    echo "Using Docker PostgreSQL container..."
    docker exec qrai_postgres pg_dump -h localhost -p 5432 -U "$DB_USER" -d "$DB_NAME" \
        --verbose --clean --if-exists --create > "$BACKUP_FILE"
else
    # „É≠„Éº„Ç´„É´PostgreSQL„ÅÆÂ†¥Âêà
    echo "Using local PostgreSQL..."
    PGPASSWORD="$POSTGRES_PASSWORD" pg_dump -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" \
        --verbose --clean --if-exists --create > "$BACKUP_FILE"
fi

# ÂúßÁ∏Æ
echo "üóúÔ∏è  Compressing backup..."
gzip "$BACKUP_FILE"

# „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Çµ„Ç§„Ç∫Á¢∫Ë™ç
BACKUP_SIZE=$(du -h "$BACKUP_COMPRESSED" | cut -f1)
echo "‚úÖ Backup created: $BACKUP_COMPRESSED ($BACKUP_SIZE)"

# Âè§„ÅÑ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÂâäÈô§
echo "üßπ Cleaning old backups (older than $BACKUP_RETENTION_DAYS days)..."
find "$BACKUP_DIR" -name "qrai_backup_*.sql.gz" -mtime +$BACKUP_RETENTION_DAYS -delete

# ÊÆãÂ≠ò„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÁ¢∫Ë™ç
REMAINING_BACKUPS=$(find "$BACKUP_DIR" -name "qrai_backup_*.sql.gz" | wc -l)
echo "üìÅ Remaining backups: $REMAINING_BACKUPS"

# Ê≠£Â∏∏ÁµÇ‰∫Ü
echo "üéâ Backup completed successfully!"
echo "Backup file: $BACKUP_COMPRESSED"

# Azure Blob Storage „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
if [ -n "$AZURE_STORAGE_CONNECTION_STRING" ] && command -v az &> /dev/null; then
    echo "‚òÅÔ∏è  Uploading to Azure Blob Storage..."
    BLOB_NAME="backups/$(basename "$BACKUP_COMPRESSED")"

    az storage blob upload \
        --connection-string "$AZURE_STORAGE_CONNECTION_STRING" \
        --container-name "qrai-backups" \
        --name "$BLOB_NAME" \
        --file "$BACKUP_COMPRESSED" \
        --overwrite

    echo "‚úÖ Uploaded to Azure: $BLOB_NAME"
else
    echo "‚ö†Ô∏è  Azure CLI not configured, skipping cloud upload"
fi

echo "üìä Backup Summary:"
echo "  - File: $BACKUP_COMPRESSED"
echo "  - Size: $BACKUP_SIZE"
echo "  - Retention: $BACKUP_RETENTION_DAYS days"
echo "  - Local backups: $REMAINING_BACKUPS"
