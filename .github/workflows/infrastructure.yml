name: 🚀 Infrastructure CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths: ['infra/**', 'scripts/**', '.github/workflows/infrastructure.yml']
  pull_request:
    branches: [main]
    paths: ['infra/**', 'scripts/**']

env:
  AZURE_RESOURCE_GROUP: qrai-rg-dev
  AZURE_LOCATION: japaneast

jobs:
  validate:
    name: 🔍 Validate Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Validate Bicep Template
        run: |
          echo "🔍 Bicepテンプレート構文チェック"
          az bicep build --file infra/bicep/main.bicep --stdout > /dev/null
          echo "✅ Bicep構文チェック完了"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Format Check
        run: |
          echo "🔍 Terraformフォーマットチェック"
          cd infra/terraform
          terraform fmt -check -recursive
          echo "✅ Terraformフォーマット確認完了"

      - name: Terraform Validate
        run: |
          echo "🔍 Terraform構文チェック"
          cd infra/terraform
          terraform init -backend=false
          terraform validate
          echo "✅ Terraform構文チェック完了"

      - name: Bicep What-If Analysis
        if: github.event_name == 'pull_request'
        run: |
          echo "📊 Bicep What-If分析実行"
          USER_OBJECT_ID=$(az ad signed-in-user show --query id -o tsv)

          # リソースグループが存在しない場合は作成
          if ! az group show --name ${{ env.AZURE_RESOURCE_GROUP }} &>/dev/null; then
            az group create --name ${{ env.AZURE_RESOURCE_GROUP }} --location ${{ env.AZURE_LOCATION }}
          fi

          az deployment group what-if \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --template-file infra/bicep/main.bicep \
            --parameters @infra/bicep/main.bicepparam \
            --parameters keyVaultAccessObjectId=$USER_OBJECT_ID \
            --parameters openRouterApiKey='test-key-placeholder' \
            --parameters googleAiApiKey='test-key-placeholder'

  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Security Scan
        run: |
          echo "🔍 セキュリティスキャン実行"

          # APIキーパターンチェック
          if grep -r --include="*.bicep" --include="*.tf" --include="*.yml" --include="*.py" \
             'sk-[a-zA-Z0-9]\{20,\}\|AIza[a-zA-Z0-9]\{35\}' \
             --exclude-dir=.git --exclude-dir=node_modules .; then
            echo "❌ ハードコードされたAPIキーが検出されました"
            exit 1
          fi

          # メールアドレスパターンチェック
          if grep -r --include="*.bicep" --include="*.tf" --include="*.yml" \
             '[a-zA-Z0-9._%+-]\+@[a-zA-Z0-9.-]\+\.[a-zA-Z]\{2,\}' \
             --exclude-dir=.git .; then
            echo "❌ ハードコードされたメールアドレスが検出されました"
            exit 1
          fi

          echo "✅ セキュリティスキャン完了"

  deploy-bicep:
    name: 🚀 Deploy Bicep Infrastructure
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: development
    outputs:
      key-vault-name: ${{ steps.bicep-deploy.outputs.key-vault-name }}
      search-endpoint: ${{ steps.bicep-deploy.outputs.search-endpoint }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: |
          if ! az group show --name ${{ env.AZURE_RESOURCE_GROUP }} &>/dev/null; then
            echo "📦 リソースグループ作成: ${{ env.AZURE_RESOURCE_GROUP }}"
            az group create --name ${{ env.AZURE_RESOURCE_GROUP }} --location ${{ env.AZURE_LOCATION }}
          else
            echo "✅ リソースグループ確認済み: ${{ env.AZURE_RESOURCE_GROUP }}"
          fi

      - name: Deploy Bicep Template
        id: bicep-deploy
        run: |
          echo "🚀 Bicepデプロイメント開始"
          USER_OBJECT_ID=$(az ad signed-in-user show --query id -o tsv)
          DEPLOYMENT_NAME="qrai-bicep-$(date +%Y%m%d-%H%M%S)"

          az deployment group create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name $DEPLOYMENT_NAME \
            --template-file infra/bicep/main.bicep \
            --parameters @infra/bicep/main.bicepparam \
            --parameters keyVaultAccessObjectId=$USER_OBJECT_ID \
            --parameters openRouterApiKey='${{ secrets.OPENROUTER_API_KEY }}' \
            --parameters googleAiApiKey='${{ secrets.GOOGLE_AI_API_KEY }}' \
            --verbose

          # Outputs取得
          KEY_VAULT_NAME=$(az deployment group show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name $DEPLOYMENT_NAME \
            --query properties.outputs.keyVaultName.value -o tsv)

          SEARCH_ENDPOINT=$(az deployment group show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name $DEPLOYMENT_NAME \
            --query properties.outputs.searchEndpoint.value -o tsv)

          echo "key-vault-name=$KEY_VAULT_NAME" >> $GITHUB_OUTPUT
          echo "search-endpoint=$SEARCH_ENDPOINT" >> $GITHUB_OUTPUT
          echo "✅ Bicepデプロイ完了: Key Vault=$KEY_VAULT_NAME"

  deploy-terraform:
    name: 🏗️ Deploy Terraform Infrastructure
    runs-on: ubuntu-latest
    needs: [deploy-bicep]
    if: github.ref == 'refs/heads/main'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Plan
        run: |
          echo "📋 Terraformプラン実行"
          cd infra/terraform
          terraform init
          terraform plan \
            -var="bicep_key_vault_name=${{ needs.deploy-bicep.outputs.key-vault-name }}" \
            -var="bicep_search_endpoint=${{ needs.deploy-bicep.outputs.search-endpoint }}" \
            -out=tfplan

      - name: Terraform Apply
        run: |
          echo "🚀 Terraformデプロイ実行"
          cd infra/terraform
          terraform apply tfplan
          echo "✅ Terraformデプロイ完了"

      - name: Display Deployment Summary
        run: |
          echo "📊 デプロイメント結果サマリー"
          echo "リソースグループ: ${{ env.AZURE_RESOURCE_GROUP }}"
          echo "Key Vault: ${{ needs.deploy-bicep.outputs.key-vault-name }}"
          echo "Search Endpoint: ${{ needs.deploy-bicep.outputs.search-endpoint }}"
          echo "リージョン: Japan East"
