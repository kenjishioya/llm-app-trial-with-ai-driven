---
description:
globs:
alwaysApply: true
---
---
description: >
  QRAI プロジェクト共通のコーディング指針・出力フォーマット・ドキュメント規約。
  セキュリティ以外の基本ルールをまとめ、全言語・全フォルダに適用します。
alwaysApply: true
---

# 🧭 コアルール

> セキュリティ以外の“絶対守るべき最小限規約”を記載。詳細な背景や長文ガイドは `docs/` 配下を参照してください。
> AI 生成時、以下ルールに違反する提案があれば修正または拒否し、最終的に遵守されたコードのみを出力してください。
> 必要に応じて `@Docs` を使い、ユーザに `docs/contributing.md` や `docs/operational_runbook.md` の該当セクションを参照させてください。

## 1. 出力フォーマット
- コードブロックには **言語タグ** を必ず付与（例: ````python`）。
- ファイルは **UTF-8 / LF 改行**、BOM なし。
- 1 ファイルあたり 500 行を超えそうなら分割を検討する。
- 詳細: @Docs docs/contributing.md#出力フォーマット

## 2. コメント & 文字列
- コメントは **日本語で簡潔**に記述。関数ドキュメント（docstring）は英語で書く。
- 1行のコメントは 80 文字以内。長い場合は複数行コメントにする。
- TODO 記法: `// TODO(名前): 説明` または `# TODO(名前): 説明` を使う。
- 詳細: @Docs docs/contributing.md#コメント

## 3. コードスタイル
| 言語         | フォーマッタ         | 静的解析             |
|--------------|----------------------|----------------------|
| **Python**   | `black --line-length 88` | `ruff` (E, F, I 規約) |
| **TypeScript/JavaScript** | `prettier` + ESLint AirBnB | `eslint --fix`       |
| **Terraform**| `terraform fmt`      | `tflint`             |
| **Bicep**    | `bicep format`       | `bicep linter`       |
- 詳細: @Docs docs/architecture/README.md#設計方針

## 4. テスト
- Python は **pytest**、TS は **Vitest** を使用し、**必ず同 PR にテストコードを含める**。
- カバレッジは **60 % 以上** を維持。低下する変更は差し戻し。
- テスト対象: `pytest -q` で API レスポンスとロジックをチェック、`vitest run` で UI コンポーネントを検証。
- 詳細: @Docs docs/architecture/component_api.md#テスト戦略

## 5. ドキュメント
- Markdown 見出しは **H2 (`##`)** まで。H3 以降は避ける。
- Mermaid の改行は **`<br/>`** を使用し、`\n` は使わない。
- 内部リンクは **相対パス** (`../architecture/...`) を使う。
- 長い解説は `docs/` フォルダにまとめ、ルールにはリンクを貼る。
- 詳細: @Docs docs/operational_runbook.md#ドキュメント

## 6. Pull Request ルール
1. **単一目的** — 1 PR に 1 機能または 1 修正のみを含める。
2. **タイトル形式** — `<type>(scope): 短い説明`（例: `feat(api): add streaming SSE endpoint`）。
3. **CI 緑** — Lint、テスト、`terraform plan`、`az deployment what-if` がすべて成功すること。
4. 詳細: @Docs docs/contributing.md#Pull-Request-ルール

## 7. 依存管理
- Python 依存は `requirements.txt` または Poetry の `pyproject.toml` に追加し、バージョンをピン留め（`~=`）。
- npm パッケージは `pnpm add <pkg>` で追加し、`^` や `~` を使ってバージョンを厳格に管理。
- 急なアップデートによるビルドエラーを防ぐため、**依存追加は PR コメントに目的・理由を明記**する。
- 詳細: @Docs docs/architecture/README.md#依存管理

## 8. プロンプト／AI 生成制御
- **不要な長文や謝辞は省く** — 「ありがとうございます」「私は AI です」などは含めない。
- **ファイルの一括置換**が必要な場合は、必ず canmore ツールで更新し、単純な `sed` コマンドは使わない。
- AI が生成した内容がこのルールに違反していた場合、出力を**再生成**し、それでも修正できない場合は**謝罪メッセージ**を返して停止する。
- 詳細: @Docs docs/architecture/crosscutting.md#AI-制御

---
