---
description: 
globs: infra/terraform/**/*.tf
alwaysApply: false
---
---
description: >
  QRAI プロジェクトにおける Terraform ルール。
  インフラコードを一貫性・可読性・安全性を保って管理するための最小限ガイドラインをまとめています。
  `infra/terraform/**/*.tf` に自動適用されます。  
  詳細な背景・解説は `@Docs docs/architecture/deployment.md` を参照してください。
globs:
  - "infra/terraform/**/*.tf"
---

# 🚀 Terraform ルール

> Terraform コードに対して自動適用されるルールです。  
> AI 生成コードや手動編集時に、以下項目を遵守してください。  
> 違反があれば AI は再生成または修正し、最終的に遵守された状態で出力してください。  

## 1. ファイル構成とモジュール分割
- **1 リソース＝1ファイル**原則  
  - リソースごとにファイルを分割し、`<resource>_<name>.tf` の命名を使う（例: `network_vnet.tf`, `db_postgres.tf`）。  
  - リソースグループやモジュールは `modules/` フォルダ下に配置し、再利用可能にする。  
- **標準モジュール構造**  
  - 各モジュールに `main.tf`、`variables.tf`、`outputs.tf`、`README.md` を含める。  
  - `README.md` にはモジュールの用途・変数説明・例を記述し、他モジュール使用時に参照されるようにする。

## 2. 変数とハードコーディング禁止
- **ハードコーディング禁止**  
  - リージョンや名前プレフィックス等はすべて `variables.tf` に定義し、`terraform.tfvars` または環境変数で値を注入すること。
  - 固定文字列を直接 resource ブロック内に書かない。  
- **変数定義のベストプラクティス**  
  - 変数にはデフォルトを設定せず、必須項目は `validation` ブロックで制約を明示する。  
  - `description` と `type` を必ず定義し、ドキュメント性を高める。 

## 3. Backend と State 管理
- **リモートバックエンド必須**  
  - State はローカルファイルではなく、Azure Blob Storage (Terraform backend) を使用し、`backend.tf` で設定すること。  
  - State ロックと暗号化を有効化し、同時実行による競合を防止する。  
- **ワークスペースの活用**  
  - `terraform workspace` を使い、`dev`, `staging`, `prod` など環境ごとに分離する。  
  - Workspace 切り替え時に State の誤操作が起きないよう、ドキュメントに手順を明示する。  

## 4. コーディングスタイルとフォーマット
- **`terraform fmt` を必ず実行**  
  - コード整形は `terraform fmt -recursive` を CI に組み込み、PR 前にフォーマット違反を自動修正させる。  
- **`terraform validate` / `tflint` を CI で実行**  
  - `terraform validate` で構文エラーを検出し、`tflint` でベストプラクティス違反を検出する。  
  - `tflint --disable-rule=terraform_unused_declarations` のように、プロジェクト固有ルールを除外設定すること。 

## 5. プロバイダとバージョン管理
- **プロバイダのバージョン固定**  
  - `required_providers` ブロックで明示的にバージョンをロックする（例:  
    ```hcl
    terraform {
      required_providers {
        azurerm = { source = "hashicorp/azurerm", version = "~>3.0" }
      }
    }
    ```  
  ）  
  - プロバイダバージョンアップは PR 単位で実施し、互換性テストを行う。 
- **モジュールバージョン管理**  
  - 外部モジュールを利用する際は `version` を明示し、互換性を担保する。  

## 6. セキュリティ & シークレット
- **機密情報を直接定義しない**  
  - クライアントシークレットやパスワードなどは `sensitive = true` とし、環境変数または Key Vault 統合を使う。  
  - `locals` でシークレットを操作する際も、平文がログに残らないよう `sensitive = true` を付与する。  
- **セキュリティスキャン**  
  - `terrascan` や `checkov` を CI に組み込み、S3 バケットのパブリックアクセス禁止やネットワーク ACL などのセキュリティチェックを実行する。  

## 7. 環境分離とNaming Convention
- **リソース名に環境プレフィックスを付与**  
  - すべてのリソースに環境識別子（例: `dev-`, `stg-`, `prd-`）を付与し、誤操作のリスクを低減する。  
- **タグ付けポリシー**  
  - 各リソースに必ず `environment`, `owner`, `project` などのタグを含め、コスト分析や運用監視に使えるようにする。  

## 8. 出力値とデータソース
- **必要最小限の `output` のみ定義**  
  - 他環境や他モジュールから参照する値だけを出力し、冗長な情報は出力しない。  
- **データソースの利用**  
  - `data.azurerm_resource_group` などで既存のリソースを参照し、ハードコーディングを避ける。  

## 9. ドキュメント & コメント
- **各.tf ファイル冒頭にモジュール説明を記述**  
  - `//` または `#` で簡潔な説明を追加し、ファイルの目的や主要なリソースを明示する。  
- **`README.md` で全体構成を図示**  
  - `infra/terraform/README.md` にモジュールツリーや依存関係図を記載し、オンボーディングを容易にする。  

## 10. テスト & CI/CD 統合
- **ユニットテスト**  
  - **Terratest**（Go）や **terraform-compliance** を用いて、IAM ロールやセキュリティグループなどの構成を自動検証する。  
- **プラン検証拒否基準**  
  - `terraform plan` の結果に不要リソース削除やリソース破壊計画が含まれる場合は自動でエラーとし、レビューを停止させる。  
- **Azure DevOps / GitHub Actions**  
  - `azurerm` のセットアップや `terraform init` → `plan` → `apply` → `destroy` をステップ化し、`-target` オプションの誤使用を防止する。  

## 11. AI生成制御
- **不要なリソースブロックの自動生成禁止**  
  - AI には「必要な Azure リソースのみを生成し、使わないリソースのステートは作成しない」よう指示する。  
- **既存コードとのマージ**  
  - 既存ファイルを上書きせず、新規モジュールやリソースブロックを追加するよう指示する。  
- **ルール違反時の再生成**  
  - コーディングスタイルやベストプラクティスに反した場合は再生成し、最終的に遵守されたコードを出力する。

---