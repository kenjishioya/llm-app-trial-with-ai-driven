---
description:
globs: **/*.py
alwaysApply: false
---
---
description: >
  QRAI プロジェクトにおけるPythonファイル専用ルール。
  コードスタイル、静的解析、依存管理、非同期I/O方針など、
  Python コードに関する最小限の必須ガイドラインをまとめています。
globs:
  - "**/*.py"
---

# 🐍 Pythonルール

> Python ファイルに対して自動適用されるルールです。
> AI生成コードや手動編集時に、以下の項目に違反があれば
> 修正または再生成してください。詳細な背景や例は
> `@Docs docs/architecture/component_api.md ＃テスト戦略`
> や `@Docs docs/contributing.md` を参照してください。

## 1. フォーマッタ & ランタイム環境
- **Black を必須**: `black --line-length 88` でフォーマットする。
- **Python 3.12 を前提**: `pyproject.toml` または `.python-version` に `"3.12"` を指定する。
- **型アノテーションを活用する**: 可能な限り関数引数と戻り値に `->` 形式の型注釈を付与する。

## 2. 静的解析 & Lint
- **Ruff を導入**: `ruff` を実行し、エラーコード E*, F*, I* をすべて解消する。
  - `ruff --select E,F,I --fix` で自動修正を試みる。
- **isort でインポート並び替え**: `isort . --profile black` を併用する。
- **未使用変数・未使用インポートは禁止**: `# noqa: F841` などの免責コメントは極力避ける。

## 3. 非同期 I/O ポリシー
- **FastAPI / httpx を使う場合**は必ず `async def` + `httpx.AsyncClient` を用いる。
- **同期 I/O (time.sleep, requests)** の使用は禁止。どうしても必要な場合は `run_in_threadpool` を検討する。
- **データベース接続**は `asyncpg` または SQLAlchemy で非同期ドライバを利用し、
  ブロッキング操作を排除する。

## 4. コーディング規約
- **PEP 8 準拠**: 80 字を超える行は改行。インデントはスペース 4 つ。
- **関数 docstring は英語**: Googleスタイルもしくは NumPyスタイルを選び一貫性を保つ。
- **ログ出力**には `structlog` を利用し、標準 `logging` は直接呼び出さない。
- **ファイルトップに `/usr/bin/env python3` のシバンを含めない**。コンテナ起動は `uvicorn` 等を使用する。

## 5. 依存管理
- **requirements.txt** または **poetry** (`pyproject.toml`) でバージョンを厳格管理する。
  - `==` ではなく `~=` を使い、互換パッチバージョンを許容する。
- **新規依存は必ず PR で報告**し、用途と影響範囲を明記する。
- **開発用依存**（pytest, ruff, isort）は `dev-dependencies` セクションに分ける。

## 6. テスト & CI統合
- **pytest** を使い、**必ずテストコードを同 PR に含める**。
  - テスト関数名は `test_` で始め、アサーションライブラリは標準 `assert` を使う。
- **テストフィクスチャは `tests/conftest.py` に記述**する。
- **テストカバレッジ 60 % 以上** を維持。CI で `pytest --maxfail=1 --disable-warnings -q` を実行し、結果が緑になること。
- **ユニットテスト**では外部API呼び出しをモックするために `pytest-mock` を利用する。

## 7. ドキュメント & コメント誘導
- **型コメントには英語の簡潔な説明**を付与し、長文は避ける。
- **複雑な処理には必ず関数docstring** をつけ、役割と引数・戻り値を明記。
- 詳細: @Docs docs/architecture/component_api.md#テスト戦略

## 8. セキュリティ & 静的検査
- **入力バリデーション**: FastAPI では必ず Pydantic モデルを使い、バリデーションを行う。
- **秘密情報が出力されないこと**: 環境変数以外から認証情報は取得しない。
- **SQL インジェクション対策**: 絶対に文字列連結でクエリを作成しない。
- 詳細: @Docs docs/architecture/crosscutting.md#セキュリティ設計

## 9. プロンプト / AI 生成制御
- **過度なimportや不要コードの自動生成を避ける**よう指示する。
- **関数ひとつにつき 25 行以内** を目安に、長い処理は分割を促す。
- **AIがルールに違反した場合は再生成**し、最終的に遵守されたコードのみを出力する。

---
